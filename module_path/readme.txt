FICHE R√âCAPITULATIVE
La gestion des chemins de fichiers avec Python, c'est toute une histoire !

Python est excellent pour cr√©er des scripts qui ont pour vocation de g√©rer des fichiers et des dossiers. J'ai personnellement une bonne dizaine de scripts qui tournent tous les jours sur ma machine pour diff√©rentes t√¢ches de classification et organisation de mon syst√®me d'exploitation.

Historiquement, on utilisait des modules comme le module os, glob ou encore shutil pour ex√©cuter des op√©rations de cr√©ation, suppression et gestion des fichiers.

Le module pathlib, disponible depuis la version 3.4 de Python, permet d'effectuer presque toutes les op√©rations courantes sur un syst√®me d'exploitation, avec une syntaxe orient√©e objet beaucoup plus agr√©able √† utiliser.

La classe Path
La classe Path permet de cr√©er un objet repr√©sentant un chemin vers un fichier ou un dossier de notre ordinateur. Ce chemin peut exister ou ne pas exister sur notre disque dur, ce n'est pas un pr√©requis.

La classe Path dispose de plusieurs m√©thodes de classes permettant d'acc√©der √† des chemins courants de notre syst√®me d'exploitation, comme le dossier utilisateur :

from pathlib import Path
 
dossier_utilisateur = Path.home()
On peut √©galement r√©cup√©rer le dossier courant :

from pathlib import Path
 
dossier_courant = Path.cwd()
Ou encore cr√©er un chemin sp√©cifique en passant une cha√Æne de caract√®res √† la classe Path :

from pathlib import Path
 
documents = Path("/Users/thibh/Documents")
Si on affiche l'objet cr√©√© √† partir de la classe Path, on se retrouve avec un objet PosixPath. Cet objet repr√©sente les chemins des syst√®mes Linux et Mac OS. Sur Windows, l'objet sera diff√©rent, car les chemins sur Windows ne sont pas les m√™mes que sur Mac et Linux. Cela ne change cependant rien aux m√©thodes et attributs que l'on peut utiliser sur cet objet.

>>> from pathlib import Path
>>> documents = Path("/Users/thibh/Documents")
>>> print(documents)
PosixPath('/Users/thibh/Documents')
Concat√©ner des chemins
Pour concat√©ner des chemins, c'est tr√®s simple, il suffit d'utiliser une barre oblique (un slash en bon franglais) :

from pathlib import Path
 
home = Path.home()              # PosixPath('/Users/thibh/')
documents = home / "Documents"  # PosixPath('/Users/thibh/Documents')
Le r√©sultat de cette concat√©nation nous retourne un nouvel objet PosixPath, nous pouvons donc concat√©ner plusieurs cha√Ænes de caract√®res √† la suite.

pathlib se charge de son c√¥t√© de g√©rer les diff√©rents syst√®mes d'exploitation et d'utiliser un slash ou un antislash selon que vous utilisiez Mac / Linux ou Windows. Ce comportement est donc similaire √† la fonction os.path.join du module os.

from pathlib import Path
 
home = Path.home()                         # PosixPath('/Users/thibh/')
documents = home / "Documents" / "Projet"  # PosixPath('/Users/thibh/Documents/Projet')
On peut √©galement utiliser la m√©thode joinpath sur un objet Path. √áa peut √™tre pratique si vous avez par exemple une liste de dossiers que vous souhaitez concat√©ner (gr√¢ce √† l'unpacking et √† l'op√©rateur splat *) :

from pathlib import Path
 
home = Path.home()                        # PosixPath('/Users/thibh/')
dossiers = ['Projets', 'Django', 'blog']
home.joinpath(*dossiers)                  # PosixPath('/Users/thibh/Projets/Django/blog')
Si vous utilisez des slashs et que vous souhaitez utiliser une m√©thode de l'objet Path, pensez √† utiliser les parenth√®ses pour entourer les chemins concat√©n√©s :

from pathlib import Path
 
home = Path.home() # PosixPath('/Users/thibh/')
 
# Ne fonctionne pas car on essaie de r√©cup√©rer l'attribut suffix sur la cha√Æne de caract√®res "main.py"
home / "Projet" / "main.py".suffix
 
# Avec des parenth√®ses, √ßa fonctionne !
(home / "Projet" / "main.py").suffix
R√©cup√©rer des informations sur un chemin

Gr√¢ce √† l'orient√© objet, on peut acc√©der √† de nombreuses informations sur un chemin avec les attributs de l'objet Path :

from pathlib import Path
 
p = Path("/Users/thibh/Documents/index.html")
p.name    # "index.html"
p.parent  # "/Users/thibh/Documents"
p.stem    # "index"
p.suffix  # ".html"
p.parts   # ("/", "Users", "thibh", "documents", "index.html")
Il existe √©galement des m√©thodes qui permettent de v√©rifier l'existence et le type d'un chemin :

from pathlib import Path
 
p = Path("/Users/thibh/Documents/index.html")
p.exists()   # True
p.is_dir()   # False
p.is_file()  # True
L√† encore, quand un chemin peut nous √™tre retourn√© par un de ces attributs, on r√©cup√®re un objet Path.

On peut donc mettre bout √† bout plusieurs fois le m√™me attribut pour remonter de plusieurs dossiers par exemple :

from pathlib import Path
 
p = Path("/Users/thibh/Documents/index.html")
p.parent.parent  # "/Users/thibh"
Cr√©er et supprimer des dossiers
Pour cr√©er un dossier, on peut utiliser la m√©thode mkdir. Cette m√©thode ne fonctionnera par d√©faut que si le dossier n'existe pas.

Vous pouvez utiliser le param√®tre exist_ok pour signifier que vous ne souhaitez pas qu'une erreur soit lev√©e si le dossier existe d√©j√† :

from pathlib import Path
 
dossier = Path("/Users/thibh/Documents/SiteWeb")
dossier.mkdir()  # L√®ve une erreur si le dossier existe d√©j√†
dossier.mkdir(exist_ok=True)
Si vous souhaitez cr√©er une hi√©rarchie de dossier qui n'existent pas, il faut ajouter le param√®tre parents :

from pathlib import Path
 
# Le dossier SiteWeb et ses sous-dossiers n'existent pas
dossier = Path("/Users/thibh/Documents/SiteWeb/sources/css")
 
# On peut tout cr√©er d'un coup avec le param√®tre parents
dossier.mkdir(parents=True)
Pour supprimer un dossier, on utilise la m√©thode rmdir :

from pathlib import Path
 
dossier = Path("/Users/thibh/Documents/SiteWeb")
dossier.rmdir()
Cette m√©thode ne fonctionne que si le dossier est vide.

Si le dossier contient des fichiers ou d'autres sous-dossiers, cette m√©thode ne fonctionne pas, et c'est le seul cas de figure o√π nous sommes oblig√©s de repasser par le module shutil et la fonction rmtree :

import shutil
from pathlib import Path
 
dossier = Path("/Users/thibh/Documents/SiteWeb")
shutil.rmtree(dossier)
Cr√©er, lire et √©crire dans un fichier
Pour cr√©er et supprimer un fichier, on peut utiliser respectivement les m√©thodes touch et unlink :

from pathlib import Path
 
fichier = Path("/Users/thibh/Documents/SiteWeb/index.html")
fichier.touch()   # On cr√©e le fichier
fichier.unlink()  # On supprime le fichier
Pour √©crire du contenu dans un fichier, on utilise la m√©thode write_text :

from pathlib import Path
 
fichier = Path("/Users/thibh/Documents/SiteWeb/index.html")
fichier.write_text("Accueil du site")
Il n'est pas obligatoire de cr√©er le fichier au pr√©alable avec la m√©thode touch.

Vous conviendrez que c'est plus rapide que de faire :

from pathlib import Path
 
fichier = Path("/Users/thibh/Documents/SiteWeb/index.html")
with open(fichier, "w") as f:
    f.write("Accueil du site")
De la m√™me fa√ßon, pour lire le contenu d'un fichier, on peut utiliser la m√©thode read_text :

>>> from pathlib import Path
 
>>> fichier = Path("/Users/thibh/Documents/SiteWeb/index.html")
>>> fichier.read_text()
"Accueil du site"
Scanner un dossier

L√† o√π pathlib rayonne, c'est vraiment dans la possibilit√© de scanner les dossiers de votre ordinateur avec des m√©thodes beaucoup plus faciles √† retenir que le module glob.

Pour r√©cup√©rer tous les fichiers et dossiers √† l'int√©rieur d'un dossier, on peut utiliser la m√©thode iterdir :

from pathlib import Path
 
for f in Path.home().iterdir():
    print(f.name)
On peut combiner cette m√©thode avec la m√©thode is_dir pour ne r√©cup√©rer que les dossiers (ici avec une compr√©hension de liste) :

from pathlib import Path
 
dossiers = [d for d in Path.home().iterdir() if d.is_dir()]
Pour scanner un dossier avec un peu plus de flexibilit√©, on peut utiliser la m√©thode glob (et oui, comme le module !). On peut par exemple ne r√©cup√©rer que les fichiers dont l'extension est .png :

from pathlib import Path
 
for f in Path.home().glob("*.png"):
    print(f.name)
Si vous souhaitez scanner un dossier de fa√ßon r√©cursive, il suffit d'utiliser rglob √† la place de glob :

from pathlib import Path
 
for f in Path.home().rglob("*.png"):
    print(f.name)
Facile non ü•≥ ?

Quelques cas pratiques
Voici quelques cas pratiques qui vous montrent la flexibilit√© et la facilit√© d'utilisation de pathlib.

Ajouter un suffixe √† un nom de fichier

from pathlib import Path
 
p = Path.home() / "image.png"               # "/Users/thibh/image.png"
p.parent / (p.stem + "-lowres" + p.suffix)  # "/Users/thibh/image-lowres.png"
Trier des fichiers selon leur extension

from pathlib import Path
 
dirs = {".jpg": "Images",
        ".gif": "Images",
        ".mp4": "Videos",
        ".pdf": "Documents",
        ".mp3": "Musiques",
        ".wav": "Musiques"}
 
tri_dir = Path.home() / "Tri"
files = [f for f in tri_dir.iterdir() if f.is_file()]
for f in files:
    # Si aucune correspondance n'est trouv√© pour l'extension, on place les fichiers dans un dossier Autres
    output_dir = tri_dir / dirs.get(f.suffix, "Autres")
    output_dir.mkdir(exist_ok=True)
    f.rename(output_dir / f.name)
On peut utiliser la m√©thode rename pour d√©placer un fichier.

Cr√©er les constantes d'un dossier avec file

from pathlib import Path
 
SOURCE_FILE = Path(__file__).resolve()  # resolve permet de r√©soudre les liens symboliques
SOURCE_DIR = SOURCE_FILE.parent
ROOT_DIR = SOURCE_DIR.parent
DATA_DIR = SOURCE_DIR / "DATA"
Ressources pour cette session